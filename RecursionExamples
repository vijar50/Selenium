public class Recursion{

     public static void main(String []args){
        printNumbers(5);
        System.out.println("CatEyes " + catEyes(5));
        System.out.println("Power " + power(3,4));
        System.out.println("Factorial " + factorial(4));
        System.out.println("Fibonacci " + fibonacci(8));
        System.out.println("Mobile Speakers " + mobileSpeakers(3));
        System.out.println("Sum of digits " + sum(135));
        System.out.println("Counting 5: " + count5(2353515));
        int [] array = {11,34,56,77,88,99,123,456,2345};
        System.out.println("Binary Search: " + binarySearch(array, 99, 0, array.length-1));
     }
     
     public static void printNumbers(int num){
         //Takes a value and returns descending numbers till 0 case
         if(num == 0){
             return;
         } else{
             System.out.println(num);
             printNumbers(num - 1);
         }
     }
     
     public static int catEyes(int cats){
         //Takes a value and returns value * 2
         if(cats==0){
             return 0;
         }else{
             return 3 + catEyes(cats-1);
         }
     }
     
     public static int power(int base, int num){
         //Base is a number, num is the power of that num, this func calculates
         if(num == 1){
             return base;
         } else{
             return base * power(base, num-1);
         }
     }
     
     public static int factorial(int num){
         //returns factorial of num, product of num * all numbers below it.
         if(num == 0 || num == 1){
             return 1;
         }else{
             return num * factorial(num-1);
         }
     }
     
     public static int fibonacci(int num){
         //prints the position of num in the fib sequence
         if(num == 0){
             return 0;
         }//double base case. 1 + 0 = 1
         if(num == 1){
             return 1;
         }else{
             //fib is summation of previous 2 numbers
             return fibonacci(num - 1) + fibonacci(num - 2);
         }
     }
     
     public static int mobileSpeakers(int mobiles){
         //Return 1 speaker for odd mobiles, 2 speakers for even mobiles, sum.
         if (mobiles == 0){
             return 0;
         }
         else{
             if(mobiles % 2 == 0){
                 return 2 + mobileSpeakers(mobiles-1);
             }else{
                 return 1 + mobileSpeakers(mobiles-1);
             }
         }
     }
     
     public static int sum(int num){
         //sum of the numbers written: 135 = 1+3+5 = 9
         //sum must be at least 2 digits otherwise return it
         if(num <= 9){
             return num;
         } else {
             return num % 10 + sum(num / 10);
         }
         
     }
     
     public static int count5(int num){
        //count the number of instance of '5' in an input number
        //sum must be at least 2 digits otherwise return it
        if(num <= 9){
            if(num == 5){
                return 1;
            } else {
                return 0;
            }
        } else {
            if(num % 10 == 5){
                return 1 + count5(num / 10);
            }else{
                return 0 + count5(num / 10);
            }
        }
     }
     
     public static int binarySearch(int[] array, int key, int start, int end){
         //Specify what val you want to search for in key, returns position in array
         if(start <= end){
             int middle = (start+end)/2; //get middle value of array
             if(array[middle] > key){
                 return binarySearch(array, key, start, middle - 1);
             }else if(array[middle] < key){
                 return binarySearch(array, key, middle + 1, end);
             }else {
                 return middle;
             }
         } else{
             return -1;
         }
     }
}

